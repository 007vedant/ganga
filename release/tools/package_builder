#!/usr/bin/env python
import glob
import sys
import os, getopt, shutil, string
from subprocess import call

"""
Default distutils 'setup' method overwritten.
"""

def usage():
    print '''
usage: package-builder VERSION

Tool to build Ganga RPMs and/or Python Eggs.

-h, --help
    Display this usage guide.

-b  --builddir
    Location in which to perform RPM builds
    Default: /tmp/gangabuild

#-p, --prereldir 
#    Location of prerelease python directory.
#    Example /afs/cern.ch/sw/ganga/install/6.0.0-pre
#    If not given, will assume this script is running in the 
#    prerelease tree. 

-v, --version 
    Version of ganga we're building. This will be checked out of
    SVN and into [builddir]. Assumed to be available at 
    svn.cern.ch/reps/ganga/tags/Ganga-n-n-n<version>
    Example: 6.0.0 will retrieve tags/Ganga-6-0-0 (note the automatic
    conversion of '.' to '-'.
'''

try:
    options, args = getopt.getopt(sys.argv[1:], "p:hv:", ["prereldir=", "help", "version="])
except getopt.error, x:
    print "command line syntax error"
    usage()
    sys.exit(2)

this_version = None
builddir = None
#prereldir = os.path.join(os.path.dirname(os.path.abspath(__file__)),'../../python')
for opt, arg in options:
    if opt in ('-h', '--help'):
        usage()
        sys.exit(2)
    elif opt in ('-b', '--builddir'):
        builddir = arg
    elif opt in ('-p', '--prereldir'):
        prereldir = os.path.join(arg, 'python')
    elif opt in ('-v', '--version'):
        this_version = arg 
    else:
        usage()
        sys.exit(2)

if this_version == None:
   print "Missing [-v/--version] parameter"
   usage()
   sys.exit(2)

if builddir == None:
   builddir = '/tmp/gangabuild'
else:
   print "Missing builddir option"
   usage()
   sys.exit()

workdir = os.path.join(builddir, 'workspace')

if os.path.isdir(builddir):
   shutil.rmtree(builddir)
   os.makedirs(workdir)
else:
   os.makedirs(workdir)

topdir = 'Ganga-' + string.replace(this_version, '.', '-')

print "Attempting to export Ganga " + this_version + " from SVN."
#print "Using pre-release directory: " + prereldir
os.chdir(builddir)
svnurl = 'svn+ssh://svn.cern.ch/reps/ganga/tags/' + topdir
svncmd = 'svn export -q ' + svnurl
exitcode = call([svncmd], shell=True)
if exitcode != 0:
   print "Problem exporting Ganga from SVN. Exiting."
   sys.exit()
else:
   print "Successfully exported Ganga " + this_version + " from SVN."


#for eggDir in glob.glob('*egg-info*'):
#    shutil.rmtree(eggDir, ignore_errors=True)

abstopdir = os.path.join(builddir, topdir)
print abstopdir
print  glob.glob(abstopdir + '/python/Ganga*')
packageDirs = glob.glob(abstopdir + '/python/Ganga*')
print packageDirs

rpm_require_map = {
'Ganga' : "python >= 2.4.3",
'GangaAtlas' : "Ganga >= "+this_version,
'GangaCamtology' : "Ganga >= "+this_version,
'GangaCMS' : "Ganga >= "+this_version,
'GangaDirac' : "Ganga >= "+this_version,
'GangaGaudi' : "Ganga >= "+this_version,
'GangaLHCb' : "Ganga >= "+this_version+ 
                "\npython >= 2.6.0",
'GangaNA62' : "Ganga >= "+this_version,
'GangaPanda' : "Ganga >= "+this_version,
'GangaPlotter' : "Ganga >= "+this_version,
'GangaRobot' : "Ganga >= "+this_version,
'GangaSAGA' : "Ganga >= "+this_version,
'GangaService' : "Ganga >= "+this_version,
'GangaSuperB' : "Ganga >= "+this_version,
'GangaTest' : "Ganga >= "+this_version,
'GangaTutorial' : "Ganga >= "+this_version
}

egg_require_map = {
'Ganga' : ["python>=2.4.3"],
'GangaAtlas' : ["Ganga=="+this_version],
'GangaCamtology' : ["Ganga=="+this_version],
'GangaCMS' : ["Ganga=="+this_version],
'GangaDirac' : ["Ganga=="+this_version],
'GangaGaudi' : ["Ganga=="+this_version],
'GangaLHCb' : ["Ganga=="+this_version],
'GangaNA62' : ["Ganga=="+this_version],
'GangaPanda' : ["Ganga=="+this_version],
'GangaPlotter' : ["Ganga=="+this_version],
'GangaRobot' : ["Ganga=="+this_version],
'GangaSAGA' : ["Ganga=="+this_version],
'GangaService' : ["Ganga=="+this_version],
'GangaSuperB' : ["Ganga=="+this_version],
'GangaTest' : ["Ganga=="+this_version],
'GangaTutorial' : ["Ganga=="+this_version]
}

description_map = {
'Ganga' : 'The Core Ganga package', 
'GangaAtlas' : 'The Ganga ATLAS package',
'GangaCamtology' : 'The Ganga Camtology package',
'GangaCMS' : 'The Ganga CMS package',
'GangaDirac' : 'The Ganga Dirac package',
'GangaGaudi' : 'The Ganga Gaudi package',
'GangaLHCb' : 'The Ganga LHCb package',
'GangaNA62' : 'The Ganga NA62 package',
'GangaPanda' : 'The Ganga Panda package',
'GangaPlotter' : 'The Ganga Plotter package',
'GangaRobot' : 'The Ganga Robot package',
'GangaSAGA' : 'The Ganga SAGA package',
'GangaService' : 'The Ganga Service package',
'GangaSuperB' : 'The Ganga SuperB package',
'GangaTest' : 'The Ganga Testing package',
'GangaTutorial' : 'The Ganga Tutorial package'
}

long_desc_map = {}

os.chdir(workdir)

for package in packageDirs:
    pack = str(os.path.basename(package))
    print "################################################################"
    print "Working on package " + pack 
    print "################################################################"

    fullpath = os.path.join(abstopdir+'/python/'+pack)
    print str(fullpath)
    print str(pack)
    shutil.move(str(fullpath), './' + str(pack))

    config_script = '''[global]
verbose         = 1
force-manifest  = 1

[sdist]
dist-dir        = /afs/cern.ch/sw/ganga/www/download/repo/src

[bdist]
dist-dir        = /afs/cern.ch/sw/ganga/www/download/repo/bin
plat-name       = noarch

[bdist_rpm]
dist-dir = /afs/cern.ch/sw/ganga/www/download/repo/NOARCH
vendor = "Ganga <project-ganga-developers@cern.ch>"
###REQUIREMENTS###

[install]
prefix = /opt/ganga/install/python
install_lib     = /opt/ganga/install/python
compile         = 0
'''

    config_script = config_script.replace('###REQUIREMENTS###', 'requires = ' + rpm_require_map[pack])
    conf_file = open('setup.cfg','w')
    print "Writing " + conf_file.name
    conf_file.write(config_script)
    conf_file.close()

    setup_script = '''#!/usr/bin/env python
import glob
import sys
import os
#Removing os.link() gets around the fact that hardlinks across directories arent supported by AFS
#See http://qwone.com/~jason/python/
del os.link
from setuptools import setup, find_packages

setup(
        #find all of the pythonic files
        packages = find_packages(),
        #and also things other than *.py, e.g. *.gpi, *.gpim etc
        include_package_data = True,

        #installation requirements relating to the egg distribution
        ###REQUIREMENTS###

        ###PACKAGENAME###

        ###THISVERSION###

        ###DESCRIPTION###
        description = 'Description goes here',

        ###LONG_DESCRIPTION###
        long_description = "Long description goes here",

        url = "http://ganga.web.cern.ch/ganga/",
        author = "The Ganga Project",
        author_email = "project-ganga-developers@cern.ch"
    )
'''

    filenames = []
    
#    setup_script = setup_script.replace('###PACKAGES###', 'packages = ' + str([pack])+',')
    setup_script = setup_script.replace('###REQUIREMENTS###', 'install_requires = ' + str(egg_require_map[pack])+',')
    setup_script = setup_script.replace('###PACKAGENAME###', 'name = \"' + pack + '\",')
    setup_script = setup_script.replace('###THISVERSION###', 'version = \"' + this_version+ '\",')

    setup_file = open('setup.py','w')
    print "Writing " + setup_file.name
    setup_file.write(setup_script)
    setup_file.close()

    call(["python setup.py bdist_rpm --post-uninstall " + abstopdir + "/release/tools/postun-packages.sh >> /dev/null"], shell=True)
    print "I am in " + os.getcwd()
    print "Moving " + str(pack) + " to " + str(fullpath)
    shutil.move(str(pack), str(fullpath))
    print "I am in " + os.getcwd()
    os.chdir(builddir)
    print "Removing workspace"
    shutil.rmtree('workspace')
    print "Creating workspace"
    os.makedirs('workspace')

