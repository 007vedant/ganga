#!/usr/bin/env python
#-*- python -*-

################################################################################
# Ganga Project. http://cern.ch/ganga
#
# $Id: ganga-svn-checkout,v 1.1 2009-07-30 13:30:56 moscicki Exp $
################################################################################

import os,sys
import getopt

def usage():
    print '''
usage: ganga-svn-checkout [-d URL] [-f PACKAGES|-v VERSION] [--platf=slc4_ia32_gcc34] [--export|--checkout] topdir

Checkout ganga release as defined in the PACKAGES file to the topdir. This is the release helper tool.

Exactly one option -f PACKAGES or -v VERSION must be provided:

 -f refers to the existing PACKAGES file
 -v first checks out the ganga/release/PACKAGES-$VERSION from SVN trunk

--platf option is currently not used
'''

dryrun = 0
svncmd = 'co'
svnurl = 'svn+ssh://svn.cern.ch/svn/cvs2svn/svnconverted/ganga'
platf = 'slc4_ia32_gcc34'

def update_from_globals(d):
    d.update(dict(svncmd=svncmd,svnurl=svnurl,platf=platf,version=version))
    return d

def shellcmd(cmd):
    print 'doing:',cmd
    if not dryrun:
        if os.system(cmd):
            print 'error doing: ',cmd
            sys.exit(1)
        
def export_tags(tagfile):

    print 'exporting tags from file',tagfile

    # checkout top level ganga module (all direct files are taken from trunk and are not versioned by tags)
    cmd = 'svn co --depth files %(svnurl)s/trunk/ganga ganga'%dict(svnurl=svnurl)
    shellcmd(cmd)

    tags = []

    for x in file(tagfile).readlines():
        body = x.split('#')[0].strip()
        if body == '':
          continue
        tags.append(body.split())

    
    for t in tags:
        d = dict(tagname=t[1],pkgname=t[0])
        print d
        update_from_globals(d)

	shellcmd('rm -rf %(pkgname)s'%d)
                  
        cmd = 'svn %(svncmd)s %(svnurl)s/tags/%(tagname)s/%(pkgname)s %(pkgname)s' %d
        shellcmd(cmd)
        

try:
    opts, args = getopt.getopt(sys.argv[1:], "d:v:f:", ["export","checkout","svnurl=",'platf='])
except getopt.error, x:
    print "command line syntax error"
    usage()
    sys.exit(2)

version = None
pfile = None

try:
    topdir = args[0]

except IndexError:
    usage()
    sys.exit(2)


for o,a in opts:
    if o == '--export':
        svncmd = 'export'

    if o == '--checkout':
        svncmd = 'co'

    if o in('--svnurl','-d'):
        svnurl = a
        
    if o == '--platf':
        platf = a

    if o == '-v':
        version = a

    if o == '-f':
        pfile = os.path.abspath(a)
        

if pfile and version or (not pfile and not version):
    print 'ERROR: specified EITHER version OR PACKAGES file, exactly one of these options!'
    sys.exit(1)

os.environ['PATH'] += ':'+sys.path[0]

topdir = os.path.realpath(topdir)
os.chdir(topdir)


# when exporting config one needs to use -D now because config files are not tagged...
#if svncmd == 'export':
#    format['exopt'] = '-D now'

if version in ['HEAD','trunk']:
    print '...checking out the trunk (HEAD)...'
    cmd = 'svn %(svncmd)s %(svnurl)s/trunk/ganga' % format
    shellcmd(cmd)
    sys.exit(0)

if version is None:
    tagfiles = [pfile]
else:

    d = update_from_globals({})

    tagfiles = ["ganga/release/config/PACKAGES-%(version)s" % d]
    extrafiles = ["ganga/release/ReleaseNotes-%(version)s" % d]

    shellcmd('svn %(svncmd)s --depth empty %(svnurl)s/trunk/ganga/release ganga/release'%d)
    shellcmd('svn %(svncmd)s --depth empty %(svnurl)s/trunk/ganga/release/config ganga/release/config'%d)

    # export and checkout must be handled differently for FILES
    if svncmd == 'export':
        shellcmd('svn export %(svnurl)s/trunk/ganga/release/config/PACKAGES-%(version)s ganga/release/config//PACKAGES-%(version)s'%d)
        shellcmd('svn export %(svnurl)s/trunk/ganga/release/ReleaseNotes-%(version)s ganga/release/ReleaseNotes-%(version)s'%d)
    else:
        shellcmd('svn update ganga/release/config//PACKAGES-%(version)s'%d)
        shellcmd('svn update ganga/release/ReleaseNotes-%(version)s'%d)


for f in tagfiles:
    export_tags(f)

# updated: if ganga/ top dir has any files (as it's case now: LICENSE_GPL and README) and it's tagged
# the release/config/PACKAGES-<version> and release/ReleaseNotes-<version> files have to be re-checked out
# since they are removed when ganga/ dir is updated
#if version:
#    print ' Checking out the release notes '
#    tagfiles = ["ganga/release/config/PACKAGES-%(version)s" % format]
#    extracheckouts = ["ganga/release/ReleaseNotes-%(version)s" % format]
#    cmd = 'svn -d %(svnurl)s %(svncmd)s %(exopt)s ' % format + reduce(lambda x,y: x+' '+y, tagfiles+extracheckouts)
#    shellcmd(cmd)
